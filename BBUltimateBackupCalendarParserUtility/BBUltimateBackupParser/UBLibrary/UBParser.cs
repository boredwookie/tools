using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using BBUltimateBackupParser.Ui;
using BBUltimateBackupParser.UBCalendar;
using Ionic.Zip;

namespace BBUltimateBackupParser.UBLibrary {
    /// <summary>
    /// Main entry point for the Calendar parsing stuff. There's more to it than just the calendar file itself
    /// </summary>
    public class UBParser {
        string TempPath { get; set; }
        string ZipFilePath { get; set; }

        /// <summary>
        /// Get a new instance of <see cref=" UBParser"/> that points to the Zip file generated by the Ultimate Backup BB App
        /// </summary>
        /// <param name="pathToUBZipFile">Path to the Zip file generated by the Ultimate Backup app for BlackBerry</param>
        public UBParser(string pathToUBZipFile, string tempPath = null) {
            ZipFilePath = pathToUBZipFile;

            if (tempPath == null) {
                TempPath = Path.GetTempPath() + "CalendarTemp";
            } else {
                TempPath = tempPath;
            }
        }

        /// <summary>
        /// Create a filtered calendar zip bundle based on the specified filter input
        /// </summary>
        /// <param name="pathToFilteredZip">Path to where the output zip file should be</param>
        /// <param name="textFilters">List of filters that will be applied to the source calendar file</param>
        /// <param name="from">If specified, we'll filter out calendar items that were created before the date</param>
        /// <param name="to">If specified we'll filter out calendar items that were created after the specified date</param>
        public void CreateFilteredCalendarZip(string pathToFilteredZip, List<TextFilterEntry> textFilters, DateTime? from = null, DateTime? to = null) {
            // Unzip the CalBak zip archive
            if (Directory.Exists(TempPath)) {
                Directory.Delete(TempPath, true);
            }
            Directory.CreateDirectory(TempPath);

            var pathToUnzippedArchive = UnzipArchive(ZipFilePath, TempPath);

            // There should only be one calbkp file (unless the Ultimate Backup utility changes its format)
            var calBkpFiles = Directory.EnumerateFiles(pathToUnzippedArchive, "*.calbkp");
            var calBkpFile = calBkpFiles.ElementAt(0);

            // Parse the calendar file and get back a list of filtered entries
            CalendarParser calendar = new CalendarParser(calBkpFile);
            var filteredCalendarItems = calendar.Filter(textFilters, from, to);
            

            // Write the list of filtered entries out to disk
            string filteredCalBakFileName = Path.GetFileNameWithoutExtension(pathToFilteredZip);
            var filteredCalBakFileFullPath = TempPath + Path.DirectorySeparatorChar + filteredCalBakFileName + ".calbkp";
            if (File.Exists(filteredCalBakFileFullPath)) {
                File.Delete(filteredCalBakFileFullPath);
            }
            using (TextWriter filteredEntryWriter = File.CreateText(filteredCalBakFileFullPath)) {
                filteredEntryWriter.NewLine = "\n";

                foreach (var entry in filteredCalendarItems) {
                    filteredEntryWriter.WriteLine(entry);
                }
            }


            // Zip the directory in a way that is compatible with the UltimateBackup app
            CreateFilteredArchive(pathToFilteredZip, filteredCalBakFileFullPath);
        }


        /// <summary>
        /// Unzips a zip archive
        /// </summary>
        /// <param name="pathToArchive">Path to the zip archive</param>
        /// <param name="pathToUnpack">Path to where we want to unpack the archive</param>
        /// <returns>path to the extracted zip folder</returns>
        public string UnzipArchive(string pathToArchive, string pathToUnpack) {
            // Extract
            try {
                using (ZipFile zip = ZipFile.Read(pathToArchive)) {
                    // This call to ExtractAll() assumes:
                    //   - none of the entries are password-protected.
                    //   - want to extract all entries to current working directory
                    //   - none of the files in the zip already exist in the directory;
                    //     if they do, the method will throw.
                    zip.ExtractAll(pathToUnpack, ExtractExistingFileAction.OverwriteSilently);
                }
            } catch (System.Exception ex) {
                System.Console.Error.WriteLine("exception: " + ex);
            }

            // Return the path to the extracted folder in the zip archive (doesn't always share the same name with the zip file name)
            //  Returning the first one since there should only be one unless the data format changes
            var subDirectories = Directory.EnumerateDirectories(pathToUnpack);
            return subDirectories.ElementAt(0);
        }

        /// <summary>
        /// Creates a zip archive compatible with the Ultimate Backup app for BlackBerry with the specified calbak file
        /// </summary>
        /// <param name="pathToOutputArchive">Place where the new zip file should be created</param>
        /// <param name="pathToFilteredCalBakFile">Path to the filtered calbak file</param>
        public void CreateFilteredArchive(string pathToOutputArchive, string pathToFilteredCalBakFile) {
            File.Delete(pathToOutputArchive);
            string archiveNameNoExtension = Path.GetFileNameWithoutExtension(pathToOutputArchive);
            try {
                String[] filenames = { pathToFilteredCalBakFile };
                using (ZipFile zip = new ZipFile()) {
                    zip.AddFiles(filenames, archiveNameNoExtension + Path.DirectorySeparatorChar + archiveNameNoExtension);
                    zip.Save(pathToOutputArchive);
                }
            } catch (Exception ex) {
                System.Console.Error.WriteLine("exception: " + ex);
            }
        }
    }
}
